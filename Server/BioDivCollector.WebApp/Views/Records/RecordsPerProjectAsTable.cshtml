@model BioDivCollector.WebApp.Controllers.ProjectViewModel

@using FormFactory
@using FormFactory.Attributes
@using FormFactory.AspMvc
@using BioDivCollector.DB.Models.Domain
@{
    Layout = "_LayoutProjectDetails";
}

<style>
    .dataTables_wrapper {
        padding-bottom: 50px !important;
    }
</style>


<script>
    // add new Record
    function addTableRecordToProject() {
        modalokclick = false;
        $('#formSelectorModal').modal('show');
        $('#formSelectorModal').on('hide.bs.modal', function (event) {
            if (modalokclick) {
                $('#RecordContent').html('');
                $('#records-loading-spinner').show();
                $.ajax(
                    {
                        url: "@Url.Action("AddToProject","Records", new { ProjectId = Model.Project.ProjectId})&GroupId=" + groupId + "&FormId=" + $('#form-select').val() + "&CopyFromLast=" + $('#hidden-copycheck').val(),
                    }).done(function () {
                        var goToInsideUrl = "@Url.Action("RecordsPerProject","Records", new {@id = Model.Project.ProjectId})";
                        loadRecordsURL(goToInsideUrl);
                        loadBeobachtungsTableURL('@Url.Action("RecordsPerProjectAsTable", "Records", new { @id = Model.Project.ProjectId })');
                    }
                    );
            }
            $(this).off('hide.bs.modal');
        });
    }

    function deleteTableRecordFromProject(recordId) {
        modalokclick = false;
        $('#deleteRecordModal').modal('show');
        $('#deleteRecordModal').on('hide.bs.modal', function (event) {
            if (modalokclick) {
                $('#RecordContent').html('');
                $('#records-loading-spinner').show();
                $.ajax(
            {
                url: "@Url.Action("Delete","Records")/" + recordId,
            }).done(function () {
                loadBeobachtungsTableURL('@Url.Action("RecordsPerProjectAsTable", "Records", new { @id = Model.Project.ProjectId })');
            }
            );

            }

            $(this).off('hide.bs.modal');
        });
    }

    function changeGroupForRecord(recordId) {
        modalokclick = false;
        $('#changeGroup').modal('show');
        $('#changeGroup').on('hide.bs.modal', function (event) {
            if (modalokclick) {
                $('#RecordContent').html('');
                $('#records-loading-spinner').show();
                $.ajax(
                    {
                        // TODO Change group

                    }
                );
}
            $(this).off('hide.bs.modal');
        });
    }


    function moveRecordAsTable(recordId) {
        console.log("MoveTable");
        modalokclick = false;
        $('#moverecordid').val(recordId);

        $select = $('#togeometrie-select').selectize({
                                        initItem: true,

                                        // Need to preload, so that Selectize will go get the option
                                        preload: true,
                                        maxItems: 1,
                                        persist: false,
                                        load: function (query, callback) {
                                            //if (!query.length) return callback();
                                            $.ajax({
                                                url: '@Url.Action("GetGeometriesForProject", "ReferenceGeometry")?id=' + projectId +'&search=' + encodeURIComponent(query),
                                                type: 'GET',
                                                error: function () {
                                                    callback();
                                                },
                                                success: function (res) {
                                                    callback(res.slice(0, 10));
                                                }
                                            });
                                        },
            valueField: 'Id',
                                        labelField: 'Title',
            searchField: 'Title'
                                    });





        $('#moveRecordModal').modal('show');
        $('#moveRecordModal').on('hide.bs.modal', function (event) {
            $("#moveRecordModal").removeClass("in");
            $(".modal-backdrop").remove();
            $('body').removeClass('modal-open');
            $('body').css('padding-right', '');
            $("#moveRecordModal").hide();
            if (modalokclick) {
                var opengeometry = $('#togeometrie-select').val();

                $('#loading-spinner').show();
                $.ajax(
                    {
                        url: "@Url.Action("Move","Records")?from=" + recordId + "&to=" + $('#togeometrie-select').val(),
                    }).done(function () {
                         loadBeobachtungsTableURL('@Url.Action("RecordsPerProjectAsTable", "Records", new { @id = Model.Project.ProjectId })');

                    }
                    )
            }

            $(this).off('hide.bs.modal');
        });
    }

</script>

<div class="">
    <div class="">
        @if ((bool)ViewData["ReadOnly"] == false)
            {
       
        <span style="float:right; margin-bottom:20px;">
            <button type="button" class="btn btn-primary" data-original-title="btn btn-light" title="" style="width:280px;" onclick="javascript:addTableRecordToProject();"><i class="icofont-plus-circle"></i> Neue Beobachtung hinzufügen</button>
        </span>
            }
        <div class="user-status table-responsive product-chart">

            <table id="recordsTable" class="table">
                <thead>
                    <tr>
                        <th colspan="4">Geometrie</th>

                        @foreach (BioDivCollector.DB.Models.Domain.Form form in Model.Forms)
                            {

                        <th colspan="@form.FormFormFields.Select(fff=>fff.FormField).Count()">@form.Title</th>
                            }

                        <th colspan="3">Letzte Änderung</th>
                    </tr>
                    <tr>
                        <th style="min-width:100px;">
                            Aktion
                        </th>
                        <th></th>
                        <th>
                            Bezeichnung
                        </th>
                        <th>
                            Beob. GUID
                        </th>

                        <!-- Forms -->

                        @foreach (BioDivCollector.DB.Models.Domain.Form form in Model.Forms)
                            {
                        @foreach (BioDivCollector.DB.Models.Domain.FormField formfield in form.FormFormFields.Select(fff => fff.FormField).Where(m=>m.FieldTypeId!=FieldTypeEnum.Header).OrderBy(m => m.Order))
                                {
                        <th>@formfield.Title</th>
                                }
                            }

                        <!-- End Forms -->

                        <th>
                            Erfassung
                        </th>
                        <th>
                            Datum
                        </th>
                        <th>
                            Zeit
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (BioDivCollector.WebApp.Controllers.RecordViewModel rvm in Model.Records.OrderByDescending(m => m.Record.RecordChangeLogs.Max(cl => cl.ChangeLogId)))
                        {
                    <tr>
                        <td>
                            @if ((!rvm.Readonly) && ((bool)ViewData["ReadOnly"] == false) && (rvm.Record.RecordId.ToString() != "00000000-0000-0000-0000-000000000000"))
                            {
                                <button type="button" class="btn btn-primary" data-original-title="btn btn-light" title="" style="width:42px;" onclick="openEditModal('@rvm.Record.RecordId')"><i class="fa fa-pencil-square-o"></i></button>
                                <button type="button" class="btn btn-danger" data-original-title="btn btn-light" title="" style="width:42px;" onclick="deleteTableRecordFromProject('@rvm.Record.RecordId')"><i class="icofont-ui-delete"></i></button>
                            }


                        </td>

                        @if (rvm.Record.Geometry != null)
                                {
                                    if (rvm.Record.Geometry.Polygon != null)
                                    {
                                <td>
                            <button type="button" class="btn btn-primary" data-original-title="btn btn-light" title="Auf Karte zeigen" style="width:42px;" onclick="location.href='@Url.Action("Map","Projects",new { id = Model.Project.ProjectId, geometryId = rvm.Record.Geometry.GeometryId })'"><i class="fas fa-draw-polygon"></i></button>


                        </td>
                                    }
                                    else if (rvm.Record.Geometry.Line != null)
                                    {
                        <td>
                            <button type="button" class="btn btn-primary" data-original-title="btn btn-light" title="Auf Karte zeigen" style="width:42px;" onclick="location.href='@Url.Action("Map","Projects",new { id = Model.Project.ProjectId, geometryId = rvm.Record.Geometry.GeometryId })'"><span class="material-icons">timeline</span></button>
                        
                        </td>
                                    }
                                    else
                                    {
                        <td>
                            <button type="button" class="btn btn-primary" data-original-title="btn btn-light" title="Auf Karte zeigen" style="width:42px;" onclick="location.href='@Url.Action("Map","Projects",new { id = Model.Project.ProjectId, geometryId = rvm.Record.Geometry.GeometryId })'"><i class="fas fa-map-marker-alt"></i></button>
                        </td>
                                    }



                        <td>@rvm.Record.Geometry.GeometryName</td>
                                }
                                else
                                {
                        <td></td>
                        <td>(keine Geometrie)</td>
                                }
                    <td>
                        @if (rvm.Record.RecordId.ToString() != "00000000-0000-0000-0000-000000000000")
                        {
                            <button type="button" class="btn btn-primary btn-clipboard" data-clipboard-action="copy" data-clipboard-text="@rvm.Record.BDCGuid"><i class="fa fa-copy" aria-hidden="true"></i></button>
                        }
                    </td>
                        @foreach (BioDivCollector.DB.Models.Domain.Form form in Model.Forms)
                                {
                        @foreach (BioDivCollector.DB.Models.Domain.FormField formfield in form.FormFormFields.Select(fff => fff.FormField).Where(m => m.FieldTypeId != FieldTypeEnum.Header).OrderBy(m => m.Order))
                        {
                    <td>
                        @if (rvm.Record.FormId == form.FormId)
                        {
                            if ((formfield.FieldTypeId == FieldTypeEnum.Text) || (formfield.FieldTypeId == FieldTypeEnum.Choice))
                            {
                                <text>@rvm.Record.TextData.Where(m => m.FormFieldId == formfield.FormFieldId).FirstOrDefault()?.Value</text>
                            }
                            else if (formfield.FieldTypeId == FieldTypeEnum.DateTime) 
                            {
                                <text>@rvm.Record.TextData.Where(m => m.FormFieldId == formfield.FormFieldId).FirstOrDefault()?.Value</text>
                            }
                            else if (formfield.FieldTypeId == FieldTypeEnum.Boolean)
                            {
                                if (rvm.Record.BooleanData.Where(m => m.FormFieldId == formfield.FormFieldId).FirstOrDefault()?.Value == true)
                                {
                                    <text>Ja</text>
                                }
                                else if (rvm.Record.BooleanData.Where(m => m.FormFieldId == formfield.FormFieldId).FirstOrDefault()?.Value == false)
                                {
                                    <text>Nein</text>
                                }

                            }
                        }

                    </td>
                                    }
                                }
                        <td>
                            @{
                                        var lastCl = rvm.Record.RecordChangeLogs.OrderBy(cl => cl.ChangeLogId).Last();
                            }
                            @lastCl.ChangeLog.User.FirstName @lastCl.ChangeLog.User.Name

                        </td>
                        <td>
                            @lastCl.ChangeLog.ChangeDate.ToLocalTime().ToString("dd.MM.yy")
                        </td>
                        <td>
                            @lastCl.ChangeLog.ChangeDate.ToLocalTime().ToString("HH:mm")
                        </td>
                    </tr>

                        }



                </tbody>

            </table>
        </div>
    </div>
</div>

<!-- OpenEditModal -->
<div class="modal fade" id="openEditModal" tabindex="-1" role="dialog" aria-labelledby="openEditModalLabel" aria-hidden="true" style="z-index:100000;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="openEditModalLabel">Beobachtung bearbeiten</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">X</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="openEditModalContent"></div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#recordsTable').DataTable({
            "columnDefs": [
                { "orderable": false, "targets": 0 },

                { "orderable": false, "targets": 1 }
            ],
            "order": [[2, 'asc']],
            "language": {
                "url": "/js/datatables/datatables.german.lang.json"
            }
        });
    });


    function openEditModal(id) {
        $('#openEditModalContent').html($('#Form_hidden_' + id).clone(false));

        $('#openEditModalContent select').each(function () {
            $(this).selectize();
        });

        $('#openEditModal').modal('show');


        $('#Form_hidden_'+id).submit(function (e) {

                            e.preventDefault(); // avoid to execute the actual submit of the form.

                            var form = $(this);
                            var url = form.attr('action');

                            $.ajax({
                                type: "POST",
                                url: url,
                                data: form.serialize(), // serializes the form's elements.
                                success: function (data) {
                                    $('#openEditModal').modal('hide');
                                    $('#openEditModal').on('hidden.bs.modal', function (e) {
                                        $(this).off('hidden.bs.modal');
                                        loadBeobachtungsTableURL('@Url.Action("RecordsPerProjectAsTable", "Records", new { @id = Model.Project.ProjectId })');
                                    });


                                    if (data == "OK") {
                                        $.notify({
                                            title: 'Speichern erfolgreich',
                                            message: 'Der Eintrag wurde erfolgreich gespeichert.'
                                        },
                                            {
                                                type: 'primary',
                                                allow_dismiss: false,
                                                newest_on_top: false,
                                                mouse_over: false,
                                                showProgressbar: false,
                                                spacing: 10,
                                                timer: 2000,
                                                placement: {
                                                    from: 'top',
                                                    align: 'right'
                                                },
                                                offset: {
                                                    x: 30,
                                                    y: 100
                                                },
                                                delay: 1000,
                                                z_index: 10000,
                                                animate: {
                                                    enter: 'animated fadeInDown',
                                                    exit: 'animated bounceOutRight'
                                                }
                                            });
                                    }
                                    else {
                                        $.notify({
                                            title: 'Es gab ein Problem',
                                            message: 'Fehler beim Speichern: ' + data
                                        },
                                            {
                                                type: 'danger',
                                                allow_dismiss: false,
                                                newest_on_top: false,
                                                mouse_over: false,
                                                showProgressbar: false,
                                                spacing: 10,
                                                timer: 2000,
                                                placement: {
                                                    from: 'top',
                                                    align: 'right'
                                                },
                                                offset: {
                                                    x: 30,
                                                    y: 100
                                                },
                                                delay: 1000,
                                                z_index: 10000,
                                                animate: {
                                                    enter: 'animated fadeInDown',
                                                    exit: 'animated bounceOutRight'
                                                }
                                            });
                                    }

                                }
                            });


                        });

    }

</script>
