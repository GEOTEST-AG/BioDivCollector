@using System
@using System.Collections.Generic
@using FormFactory.Attributes
@using System.Linq
@using FormFactory
@model PropertyVm

@{ bool isRequired = Model.NotOptional.HasValue && Model.NotOptional.Value; }

@if (Model.GetCustomAttributes().OfType<BioDivCollector.WebApp.Helpers.FormFactory.GuidAttribute>().Any())
{
    if (Model.Readonly)
    {
        <div id="@Model.Name">@Model.Value</div>
        <span class="input-group-btn">
            <button type="button" class="btn btn-primary btn-clipboard" data-clipboard-action="copy" data-clipboard-target="#@Model.Name"><i class="fa fa-copy" aria-hidden="true"></i></button>
        </span>
    }
    else
    {

        <label class="control-label" for="BDCGuid">BDC GUID</label>
        <div class="input-group">
            <input class="form-control" readonly="" type="text" id="@Model.Name" name="@Model.Name" value="@Model.Value">
            <span class="input-group-btn">
                <button type="button" class="btn btn-primary btn-clipboard" data-clipboard-action="copy" data-clipboard-target="#@Model.Name"><i class="fa fa-copy" aria-hidden="true"></i></button>
            </span>
        </div>
    }
}
else if (Model.GetCustomAttributes().OfType<BioDivCollector.WebApp.Helpers.FormFactory.StandardValueAttribute>().Any())
{
    if (Model.Readonly)
    {
        <div id="@Model.Name">@Model.Value</div>
    }
    else
    {
        <div class="input-group">
            <input class="form-control" readonly="" type="text" id="@Model.Name" name="@Model.Name" value="@Model.Value">
        </div>
    }
}
else if (Model.GetCustomAttributes().OfType<BioDivCollector.WebApp.Helpers.FormFactory.HeaderAttribute>().Any())
{

    <h5>@Model.DisplayName</h5>


}
else
{

    @if (!Model.Readonly && Model.Choices != null)
    {
        var choices = Model.Choices as IEnumerable<Tuple<string, string>>;
        if (choices == null && Model.Choices is IEnumerable<string>)
        {
            choices = Model.Choices.Cast<string>().Select(c => Tuple.Create(c, c));
        }
        if (Model.GetCustomAttributes().OfType<RadioAttribute>().Any())
        {
            foreach (var option in choices)
            {
                var isSelected = Model.Value != null && option.Item2 == Model.Value.ToString();
                <div class="radio">
                    <label>
                        <input type="radio" name="@Model.Name" value="@option.Item2" @Html.Raw(isSelected ? "checked" : "") @Html.Raw(isRequired ? "required" : "")>
                        @option.Item1
                    </label>
                </div> }
        }
        else
        {
            if (isRequired && choices.All(c => c.Item2 != null))
            {
                choices = choices.Prepend(new Tuple<string, string>(null, null));
            }
            <select name="@Model.Name" class="form-control" @Html.Raw(Model.Readonly()) @Html.Raw(Model.Disabled()) @Html.Raw(isRequired ? "required" : "")>
                @foreach (var option in choices)
                {
                    bool isSelected = Model.Value != null && option.Item2 == Model.Value.ToString();
                    <option value="@option.Item2" selected="@isSelected">@option.Item1</option>
                }
            </select>



        }
    }
    else
    {
        var dataAttributes = Model.GetCustomAttributes();
        var inputType = dataAttributes.Any(da => da is PasswordAttribute) ? "password" : "text";
        var placeHolderText = Model.GetCustomAttributes().OfType<FormFactory.Attributes.DisplayAttribute>().Select(a => a.Prompt).FirstOrDefault();

        var suggestionsAttribute = Model.GetCustomAttributes().OfType<SuggestionsUrlAttribute>().SingleOrDefault();
        var needsAutoComplete = (!Model.Readonly && (suggestionsAttribute != null || (Model.Suggestions != null && Model.Suggestions.Cast<object>().Any())));
        var autoCompleteAtt = "";
        if (needsAutoComplete)
        {
            if (suggestionsAttribute != null)
            {
                autoCompleteAtt = "data-provide='ajax-typeahead' autocomplete='off' data-link='" + suggestionsAttribute.Url + "'";
            }
            else
            {
                var suggestions = Model.Suggestions.Cast<string>();
                var escapedSuggestions = "\"" + string.Join("\", \"", suggestions.Select(a => a.Replace("\"", "\"\""))) + "\"";
                autoCompleteAtt = "data-provide='typeahead' autocomplete='off' data-source='[" + escapedSuggestions + "]'";
            }
        }


        if (dataAttributes.Any(x => x is MultilineTextAttribute))
        {
<textarea class="form-control" @Html.Raw(Model.Readonly()) @Html.Raw(autoCompleteAtt) @Html.Raw(Model.Disabled()) @Html.UnobtrusiveValidation(Model) @Html.Raw(placeHolderText.Attr("placeholder")) name="@Model.Name" rows="5">@Model.Value</textarea> }
        else
        {
            if (Model.Readonly)
            {
                @Model.Value
            }
            else
            {
                <input class="form-control" @Html.Raw(Model.Readonly()) @Html.Raw(autoCompleteAtt) @Html.Raw(Model.Disabled()) @Html.Raw(placeHolderText.Attr("placeholder")) @Html.UnobtrusiveValidation(Model) name="@Model.Name" size="30" type="@inputType" value="@Model.Value" />
            }
        }

    }}
