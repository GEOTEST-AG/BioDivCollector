@using System
@using FormFactory.Attributes
@using System.Linq
@using FormFactory
@model PropertyVm
@{
    var dateAttr = Model.GetCustomAttributes().FirstOrDefault(dt => dt is DateAttribute || dt is DateTimeAttribute)
        ?? new DateTimeAttribute();
    var isDate = dateAttr is DateAttribute;
    var displayFormatAttribute = Model.GetCustomAttributes().OfType<DisplayFormatAttribute>().SingleOrDefault();
    var stringFormat = (displayFormatAttribute != null ? displayFormatAttribute.DataFormatString : null) ?? (isDate ? "dd MMM yyyy" : "g");
    var behaviour = isDate ? "datepicker" : "datetimepicker";
    var valueAsString = Model.Value is string ? (Model.Value as string) : Model.Value as DateTimeOffset? == null ? "" : ((DateTimeOffset?)Model.Value).Value.ToString(stringFormat);
    <input type="text" class="ff-behaviour form-control" data-ff-behaviour="@behaviour" data-ff-format="@stringFormat" name="@Model.Name" @Html.UnobtrusiveValidation(Model) value="@valueAsString" @Html.Raw(Model.Readonly()) @Html.Raw(Model.Disabled()) />
}
