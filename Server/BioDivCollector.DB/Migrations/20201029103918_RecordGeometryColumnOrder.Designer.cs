// <auto-generated />
using System;
using BioDivCollector.DB.Models.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BioDivCollector.DB.Migrations
{
    [DbContext(typeof(BioDivContext))]
    [Migration("20201029103918_RecordGeometryColumnOrder")]
    partial class RecordGeometryColumnOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.BooleanData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int?>("FormFieldId")
                        .HasColumnName("formfieldid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RecordId")
                        .HasColumnName("recordid")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<bool?>("Value")
                        .HasColumnName("value")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("pk_booleandata");

                    b.HasIndex("FormFieldId")
                        .HasName("ix_booleandata_formfieldid");

                    b.HasIndex("RecordId")
                        .HasName("ix_booleandata_recordid");

                    b.ToTable("booleandata");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLog", b =>
                {
                    b.Property<long>("ChangeLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("changelogid")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("changedate")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnName("log")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userid")
                        .HasColumnType("text");

                    b.HasKey("ChangeLogId")
                        .HasName("pk_changelogs");

                    b.HasIndex("UserId")
                        .HasName("ix_changelogs_userid");

                    b.ToTable("changelogs");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogForm", b =>
                {
                    b.Property<int>("FormId")
                        .HasColumnName("formid")
                        .HasColumnType("integer");

                    b.Property<long>("ChangeLogId")
                        .HasColumnName("changelogid")
                        .HasColumnType("bigint");

                    b.HasKey("FormId", "ChangeLogId")
                        .HasName("pk_changelogsforms");

                    b.HasIndex("ChangeLogId")
                        .HasName("ix_changelogsforms_changelogid");

                    b.ToTable("changelogsforms");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogGeometry", b =>
                {
                    b.Property<Guid>("GeometryId")
                        .HasColumnName("geometryid")
                        .HasColumnType("uuid");

                    b.Property<long>("ChangeLogId")
                        .HasColumnName("changelogid")
                        .HasColumnType("bigint");

                    b.HasKey("GeometryId", "ChangeLogId")
                        .HasName("pk_changelogsgeometries");

                    b.HasIndex("ChangeLogId")
                        .HasName("ix_changelogsgeometries_changelogid");

                    b.ToTable("changelogsgeometries");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogGroup", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnName("groupid")
                        .HasColumnType("uuid");

                    b.Property<long>("ChangeLogId")
                        .HasColumnName("changelogid")
                        .HasColumnType("bigint");

                    b.HasKey("GroupId", "ChangeLogId")
                        .HasName("pk_changelogsgroups");

                    b.HasIndex("ChangeLogId")
                        .HasName("ix_changelogsgroups_changelogid");

                    b.ToTable("changelogsgroups");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogLayer", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnName("layerid")
                        .HasColumnType("integer");

                    b.Property<long>("ChangeLogId")
                        .HasColumnName("changelogid")
                        .HasColumnType("bigint");

                    b.HasKey("LayerId", "ChangeLogId")
                        .HasName("pk_changelogslayers");

                    b.HasIndex("ChangeLogId")
                        .HasName("ix_changelogslayers_changelogid");

                    b.ToTable("changelogslayers");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnName("projectid")
                        .HasColumnType("uuid");

                    b.Property<long>("ChangeLogId")
                        .HasColumnName("changelogid")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectId", "ChangeLogId")
                        .HasName("pk_changelogsprojects");

                    b.HasIndex("ChangeLogId")
                        .HasName("ix_changelogsprojects_changelogid");

                    b.ToTable("changelogsprojects");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogRecord", b =>
                {
                    b.Property<Guid>("RecordId")
                        .HasColumnName("recordid")
                        .HasColumnType("uuid");

                    b.Property<long>("ChangeLogId")
                        .HasColumnName("changelogid")
                        .HasColumnType("bigint");

                    b.HasKey("RecordId", "ChangeLogId")
                        .HasName("pk_changelogsrecords");

                    b.HasIndex("ChangeLogId")
                        .HasName("ix_changelogsrecords_changelogid");

                    b.ToTable("changelogsrecords");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.FieldChoice", b =>
                {
                    b.Property<int>("FieldChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("fieldchoiceid")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FormFieldId")
                        .HasColumnName("formfieldid")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.HasKey("FieldChoiceId")
                        .HasName("pk_fieldchoices");

                    b.HasIndex("FormFieldId")
                        .HasName("ix_fieldchoices_formfieldid");

                    b.ToTable("fieldchoices");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_fieldtypes");

                    b.ToTable("fieldtypes");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Description = "Text"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Number"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Boolean"
                        },
                        new
                        {
                            Id = 41,
                            Description = "DateTime"
                        },
                        new
                        {
                            Id = 51,
                            Description = "Choice"
                        },
                        new
                        {
                            Id = 61,
                            Description = "Guid"
                        });
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Form", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("formid")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.HasKey("FormId")
                        .HasName("pk_forms");

                    b.ToTable("forms");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.FormField", b =>
                {
                    b.Property<int>("FormFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("formfieldid")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int>("FieldTypeId")
                        .HasColumnName("fieldtypeid")
                        .HasColumnType("integer");

                    b.Property<int?>("FormId")
                        .HasColumnName("formid")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("text");

                    b.HasKey("FormFieldId")
                        .HasName("pk_formfields");

                    b.HasIndex("FieldTypeId")
                        .HasName("ix_formfields_fieldtypeid");

                    b.HasIndex("FormId")
                        .HasName("ix_formfields_formid");

                    b.ToTable("formfields");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("groupid")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasColumnName("groupname")
                        .HasColumnType("text");

                    b.Property<int>("GroupStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("groupstatusid")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("ID_Extern")
                        .HasColumnName("id_extern")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("statusid")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("GroupId")
                        .HasName("pk_groups");

                    b.HasIndex("GroupStatusId")
                        .HasName("ix_groups_groupstatusid");

                    b.HasIndex("StatusId")
                        .HasName("ix_groups_statusid");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.GroupForm", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnName("groupid")
                        .HasColumnType("uuid");

                    b.Property<int>("FormId")
                        .HasColumnName("formid")
                        .HasColumnType("integer");

                    b.HasKey("GroupId", "FormId")
                        .HasName("pk_groupsforms");

                    b.HasIndex("FormId")
                        .HasName("ix_groupsforms_formid");

                    b.ToTable("groupsforms");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.GroupStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_groupstatuses");

                    b.ToTable("groupstatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gruppe_neu"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Gruppe_bereit"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Gruppendaten_erfasst"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Gruppendaten_gueltig"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Gruppendaten_fehlerhaft"
                        });
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.GroupUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnName("groupid")
                        .HasColumnType("uuid");

                    b.Property<bool>("ReadOnly")
                        .HasColumnName("readonly")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "GroupId")
                        .HasName("pk_groupsusers");

                    b.HasIndex("GroupId")
                        .HasName("ix_groupsusers_groupid");

                    b.ToTable("groupsusers");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Layer", b =>
                {
                    b.Property<int>("LayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("layerid")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Public")
                        .HasColumnName("public")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasColumnType("text");

                    b.Property<string>("WMSLayer")
                        .HasColumnName("wmslayer")
                        .HasColumnType("text");

                    b.HasKey("LayerId")
                        .HasName("pk_layers");

                    b.ToTable("layers");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.NumericData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int?>("FormFieldId")
                        .HasColumnName("formfieldid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RecordId")
                        .HasColumnName("recordid")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<double?>("Value")
                        .HasColumnName("value")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("pk_numericdata");

                    b.HasIndex("FormFieldId")
                        .HasName("ix_numericdata_formfieldid");

                    b.HasIndex("RecordId")
                        .HasName("ix_numericdata_recordid");

                    b.ToTable("numericdata");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("projectid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("ID_Extern")
                        .HasColumnName("id_extern")
                        .HasColumnType("text");

                    b.Property<bool>("OGD")
                        .HasColumnName("ogd")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectConfiguratorUserId")
                        .HasColumnName("projectconfiguratoruserid")
                        .HasColumnType("text");

                    b.Property<string>("ProjectManagerUserId")
                        .HasColumnName("projectmanageruserid")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnName("projectname")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectNumber")
                        .HasColumnName("projectnumber")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("projectstatusid")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("statusid")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("ProjectId")
                        .HasName("pk_projects");

                    b.HasIndex("ProjectConfiguratorUserId")
                        .HasName("ix_projects_projectconfiguratoruserid");

                    b.HasIndex("ProjectManagerUserId")
                        .HasName("ix_projects_projectmanageruserid");

                    b.HasIndex("ProjectStatusId")
                        .HasName("ix_projects_projectstatusid");

                    b.HasIndex("StatusId")
                        .HasName("ix_projects_statusid");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ProjectGroup", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnName("projectid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnName("groupid")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "GroupId")
                        .HasName("pk_projectsgroups");

                    b.HasIndex("GroupId")
                        .HasName("ix_projectsgroups_groupid");

                    b.ToTable("projectsgroups");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ProjectLayer", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnName("projectid")
                        .HasColumnType("uuid");

                    b.Property<int>("LayerId")
                        .HasColumnName("layerid")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId", "LayerId")
                        .HasName("pk_projectslayers");

                    b.HasIndex("LayerId")
                        .HasName("ix_projectslayers_layerid");

                    b.ToTable("projectslayers");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_projectstatuses");

                    b.ToTable("projectstatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Projekt_neu"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Projekt_bereit"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Projekt_gueltig"
                        });
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Record", b =>
                {
                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("recordid")
                        .HasColumnType("uuid");

                    b.Property<int?>("FormId")
                        .HasColumnName("formid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GeometryId")
                        .HasColumnName("geometryid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectGroupGroupId")
                        .HasColumnName("groupid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectGroupProjectId")
                        .HasColumnName("projectid")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("statusid")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("RecordId")
                        .HasName("pk_records");

                    b.HasIndex("FormId")
                        .HasName("ix_records_formid");

                    b.HasIndex("GeometryId")
                        .HasName("ix_records_geometryid");

                    b.HasIndex("StatusId")
                        .HasName("ix_records_statusid");

                    b.HasIndex("ProjectGroupProjectId", "ProjectGroupGroupId")
                        .HasName("ix_records_projectid_groupid");

                    b.ToTable("records");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ReferenceGeometry", b =>
                {
                    b.Property<Guid>("GeometryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("geometryid")
                        .HasColumnType("uuid");

                    b.Property<string>("GeometryName")
                        .HasColumnName("geometryname")
                        .HasColumnType("text");

                    b.Property<LineString>("Line")
                        .HasColumnName("line")
                        .HasColumnType("geometry(LINESTRING, 4326)");

                    b.Property<Point>("Point")
                        .HasColumnName("point")
                        .HasColumnType("geometry(POINT, 4326)");

                    b.Property<Polygon>("Polygon")
                        .HasColumnName("polygon")
                        .HasColumnType("geometry(POLYGON, 4326)");

                    b.Property<Guid>("ProjectGroupGroupId")
                        .HasColumnName("groupid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectGroupProjectId")
                        .HasColumnName("projectid")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("statusid")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("GeometryId")
                        .HasName("pk_geometries");

                    b.HasIndex("StatusId")
                        .HasName("ix_geometries_statusid");

                    b.HasIndex("ProjectGroupProjectId", "ProjectGroupGroupId")
                        .HasName("ix_geometries_projectid_groupid");

                    b.ToTable("geometries");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.ToTable("statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "unchanged"
                        },
                        new
                        {
                            Id = 2,
                            Description = "changed"
                        },
                        new
                        {
                            Id = 3,
                            Description = "deleted"
                        });
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.TextData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int?>("FieldChoiceId")
                        .HasColumnName("fieldchoiceid")
                        .HasColumnType("integer");

                    b.Property<int?>("FormFieldId")
                        .HasColumnName("formfieldid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RecordId")
                        .HasColumnName("recordid")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_textdata");

                    b.HasIndex("FieldChoiceId")
                        .HasName("ix_textdata_fieldchoiceid");

                    b.HasIndex("FormFieldId")
                        .HasName("ix_textdata_formfieldid");

                    b.HasIndex("RecordId")
                        .HasName("ix_textdata_recordid");

                    b.ToTable("textdata");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnName("statusid")
                        .HasColumnType("integer");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("StatusId")
                        .HasName("ix_users_statusid");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.UserHasProjectLayer", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnName("projectid")
                        .HasColumnType("uuid");

                    b.Property<int>("LayerId")
                        .HasColumnName("layerid")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<double>("Transparency")
                        .HasColumnName("transparency")
                        .HasColumnType("double precision");

                    b.Property<bool>("Visible")
                        .HasColumnName("visible")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "ProjectId", "LayerId")
                        .HasName("pk_usershaveprojectlayers");

                    b.HasIndex("LayerId")
                        .HasName("ix_usershaveprojectlayers_layerid");

                    b.HasIndex("ProjectId")
                        .HasName("ix_usershaveprojectlayers_projectid");

                    b.ToTable("usershaveprojectlayers");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.UserLayer", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("text");

                    b.Property<int>("LayerId")
                        .HasColumnName("layerid")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "LayerId")
                        .HasName("pk_userslayers");

                    b.HasIndex("LayerId")
                        .HasName("ix_userslayers_layerid");

                    b.ToTable("userslayers");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.BooleanData", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.FormField", "FormField")
                        .WithMany()
                        .HasForeignKey("FormFieldId")
                        .HasConstraintName("fk_booleandata_formfields_formfieldid");

                    b.HasOne("BioDivCollector.DB.Models.Domain.Record", "Record")
                        .WithMany("BooleanData")
                        .HasForeignKey("RecordId")
                        .HasConstraintName("fk_booleandata_records_recordid");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLog", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_changelogs_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogForm", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .HasConstraintName("fk_changelogsforms_changelogs_changelogid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Form", "Form")
                        .WithMany("FormChangeLogs")
                        .HasForeignKey("FormId")
                        .HasConstraintName("fk_changelogsforms_forms_formid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogGeometry", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .HasConstraintName("fk_changelogsgeometries_changelogs_changelogid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.ReferenceGeometry", "Geometry")
                        .WithMany("GeometryChangeLogs")
                        .HasForeignKey("GeometryId")
                        .HasConstraintName("fk_changelogsgeometries_geometries_geometryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogGroup", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .HasConstraintName("fk_changelogsgroups_changelogs_changelogid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Group", "Group")
                        .WithMany("GroupChangeLogs")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_changelogsgroups_groups_groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogLayer", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .HasConstraintName("fk_changelogslayers_changelogs_changelogid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Layer", "Layer")
                        .WithMany("LayerChangeLogs")
                        .HasForeignKey("LayerId")
                        .HasConstraintName("fk_changelogslayers_layers_layerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogProject", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .HasConstraintName("fk_changelogsprojects_changelogs_changelogid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Project", "Project")
                        .WithMany("ProjectChangeLogs")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_changelogsprojects_projects_projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ChangeLogRecord", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .HasConstraintName("fk_changelogsrecords_changelogs_changelogid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Record", "Record")
                        .WithMany("RecordChangeLogs")
                        .HasForeignKey("RecordId")
                        .HasConstraintName("fk_changelogsrecords_records_recordid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.FieldChoice", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.FormField", "FormField")
                        .WithMany("FieldChoices")
                        .HasForeignKey("FormFieldId")
                        .HasConstraintName("fk_fieldchoices_formfields_formfieldid");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.FormField", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .HasConstraintName("fk_formfields_fieldtypes_fieldtypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Form", "Form")
                        .WithMany("FormFields")
                        .HasForeignKey("FormId")
                        .HasConstraintName("fk_formfields_forms_formid");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Group", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.GroupStatus", "GroupStatus")
                        .WithMany()
                        .HasForeignKey("GroupStatusId")
                        .HasConstraintName("fk_groups_groupstatuses_groupstatusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_groups_statuses_statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.GroupForm", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Form", "Form")
                        .WithMany("FormGroups")
                        .HasForeignKey("FormId")
                        .HasConstraintName("fk_groupsforms_forms_formid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Group", "Group")
                        .WithMany("GroupForms")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_groupsforms_groups_groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.GroupUser", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_groupsusers_groups_groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_groupsusers_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.NumericData", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.FormField", "FormField")
                        .WithMany()
                        .HasForeignKey("FormFieldId")
                        .HasConstraintName("fk_numericdata_formfields_formfieldid");

                    b.HasOne("BioDivCollector.DB.Models.Domain.Record", "Record")
                        .WithMany("NumericData")
                        .HasForeignKey("RecordId")
                        .HasConstraintName("fk_numericdata_records_recordid");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Project", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.User", "ProjectConfigurator")
                        .WithMany()
                        .HasForeignKey("ProjectConfiguratorUserId")
                        .HasConstraintName("fk_projects_users_projectconfiguratoruserid");

                    b.HasOne("BioDivCollector.DB.Models.Domain.User", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerUserId")
                        .HasConstraintName("fk_projects_users_projectmanageruserid");

                    b.HasOne("BioDivCollector.DB.Models.Domain.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .HasConstraintName("fk_projects_projectstatuses_projectstatusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_projects_statuses_statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ProjectGroup", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Group", "Group")
                        .WithMany("GroupProjects")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_projectsgroups_groups_groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Project", "Project")
                        .WithMany("ProjectGroups")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_projectsgroups_projects_projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ProjectLayer", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Layer", "Layer")
                        .WithMany("LayerProjects")
                        .HasForeignKey("LayerId")
                        .HasConstraintName("fk_projectslayers_layers_layerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Project", "Project")
                        .WithMany("ProjectLayers")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_projectslayers_projects_projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.Record", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Form", "Form")
                        .WithMany("FormRecords")
                        .HasForeignKey("FormId")
                        .HasConstraintName("fk_records_forms_formid");

                    b.HasOne("BioDivCollector.DB.Models.Domain.ReferenceGeometry", "Geometry")
                        .WithMany("Records")
                        .HasForeignKey("GeometryId")
                        .HasConstraintName("fk_records_geometries_geometryid");

                    b.HasOne("BioDivCollector.DB.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_records_statuses_statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.ProjectGroup", "ProjectGroup")
                        .WithMany("Records")
                        .HasForeignKey("ProjectGroupProjectId", "ProjectGroupGroupId")
                        .HasConstraintName("fk_records_projectsgroups_projectid_groupid");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.ReferenceGeometry", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_geometries_statuses_statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.ProjectGroup", "ProjectGroup")
                        .WithMany("Geometries")
                        .HasForeignKey("ProjectGroupProjectId", "ProjectGroupGroupId")
                        .HasConstraintName("fk_geometries_projectsgroups_projectid_groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.TextData", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.FieldChoice", "FieldChoice")
                        .WithMany()
                        .HasForeignKey("FieldChoiceId")
                        .HasConstraintName("fk_textdata_fieldchoices_fieldchoiceid");

                    b.HasOne("BioDivCollector.DB.Models.Domain.FormField", "FormField")
                        .WithMany()
                        .HasForeignKey("FormFieldId")
                        .HasConstraintName("fk_textdata_formfields_formfieldid");

                    b.HasOne("BioDivCollector.DB.Models.Domain.Record", "Record")
                        .WithMany("TextData")
                        .HasForeignKey("RecordId")
                        .HasConstraintName("fk_textdata_records_recordid");
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.User", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_users_statuses_statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.UserHasProjectLayer", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .HasConstraintName("fk_usershaveprojectlayers_layers_layerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_usershaveprojectlayers_projects_projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.User", "User")
                        .WithMany("UserHasProjectLayers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_usershaveprojectlayers_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioDivCollector.DB.Models.Domain.UserLayer", b =>
                {
                    b.HasOne("BioDivCollector.DB.Models.Domain.Layer", "Layer")
                        .WithMany("LayerUsers")
                        .HasForeignKey("LayerId")
                        .HasConstraintName("fk_userslayers_layers_layerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioDivCollector.DB.Models.Domain.User", "User")
                        .WithMany("UserLayers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_userslayers_users_userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
